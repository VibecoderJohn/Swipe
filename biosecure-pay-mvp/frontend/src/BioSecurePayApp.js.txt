import React, { useState } from 'react';
import { View, Text, TextInput, Button, Alert, ActivityIndicator } from 'react-native';
import { NativeBiometrics } from 'react-native-biometrics'; // For fingerprint/face
import Voice from '@react-native-voice/voice'; // For voice biometrics
import axios from 'axios';
import { PlaidLink } from 'react-native-plaid-link-sdk'; // Plaid integration
import { StripeProvider, useStripe } from '@stripe/stripe-react-native'; // Stripe integration

const API_BASE_URL = 'https://api.biosecurepay.com/api/v1';
const STRIPE_PUBLISHABLE_KEY = 'pk_test_your_stripe_key'; // Replace with your Stripe key

const BioSecurePayApp = () => {
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [fullName, setFullName] = useState('');
  const [kycDocs, setKycDocs] = useState([]);
  const [biometricType, setBiometricType] = useState('');
  const [plaidToken, setPlaidToken] = useState('');
  const [transactionData, setTransactionData] = useState({ amount: '', recipient: '' });
  const [loading, setLoading] = useState(false);
  const { initPaymentSheet, presentPaymentSheet } = useStripe();

  // Register User
  const handleRegister = async () => {
    setLoading(true);
    try {
      const response = await axios.post(`${API_BASE_URL}/register`, {
        email,
        phone,
        full_name: fullName,
        password: 'tempPassword123', // Temporary for MVP
      });
      Alert.alert('Success', `User registered: ${response.data.user_id}`);
    } catch (error) {
      Alert.alert('Error', error.response?.data?.error || 'Registration failed');
    }
    setLoading(false);
  };

  // KYC Verification (Placeholder for doc upload)
  const handleKycVerify = async () => {
    setLoading(true);
    try {
      const response = await axios.post(`${API_BASE_URL}/kyc/verify`, { documents: kycDocs });
      Alert.alert('Success', `KYC Status: ${response.data.status}`);
    } catch (error) {
      Alert.alert('Error', error.response?.data?.error || 'KYC submission failed');
    }
    setLoading(false);
  };

  // Biometric Enrollment
  const handleEnrollBiometrics = async () => {
    setLoading(true);
    try {
      let templateData;
      if (biometricType === 'fingerprint' || biometricType === 'face') {
        const result = await NativeBiometrics.createSignature({
          promptMessage: 'Enroll Biometric',
        });
        templateData = result.signature; // Hashed biometric template
      } else if (biometricType === 'voice') {
        await Voice.start('en-US');
        Voice.onSpeechResults = (e) => {
          templateData = e.value[0]; // Simplified for MVP; use proper voice SDK
          Voice.stop();
        };
      }
      const response = await axios.post(`${API_BASE_URL}/enroll-biometrics`, {
        type: biometricType,
        template_data: templateData,
      });
      Alert.alert('Success', `Biometric enrolled: ${response.data.biometric_id}`);
    } catch (error) {
      Alert.alert('Error', error.response?.data?.error || 'Biometric enrollment failed');
    }
    setLoading(false);
  };

  // Link Bank Account via Plaid
  const handlePlaidLink = async (token) => {
    setLoading(true);
    try {
      const response = await axios.post(`${API_BASE_URL}/link-account`, {
        plaid_public_token: token,
      });
      setPlaidToken(token);
      Alert.alert('Success', `Account linked: ${response.data.linked_account_id}`);
    } catch (error) {
      Alert.alert('Error', error.response?.data?.error || 'Account linking failed');
    }
    setLoading(false);
  };

  // Initiate and Authenticate Transaction
  const handleTransaction = async () => {
    setLoading(true);
    try {
      // Initiate
      const initResponse = await axios.post(`${API_BASE_URL}/transaction/initiate`, {
        amount: parseFloat(transactionData.amount),
        recipient: transactionData.recipient,
        plaid_account_id: plaidToken,
      });
      const transactionId = initResponse.data.transaction_id;

      // Authenticate with Biometrics (e.g., face + voice)
      const biometricResult = await NativeBiometrics.createSignature({
        promptMessage: 'Authenticate Transaction',
      });
      const authResponse = await axios.post(`${API_BASE_URL}/transaction/authenticate`, {
        transaction_id: transactionId,
        biometric_types: ['face'],
        input_data: biometricResult.signature,
      });

      if (authResponse.data.authenticated) {
        // Execute via Stripe
        await initPaymentSheet({ paymentIntentClientSecret: 'your_stripe_secret' }); // Replace with dynamic secret
        const { error } = await presentPaymentSheet();
        if (!error) {
          const executeResponse = await axios.post(`${API_BASE_URL}/transaction/execute`, {
            transaction_id: transactionId,
          });
          Alert.alert('Success', `Transaction executed: ${executeResponse.data.charge_id}`);
        } else {
          Alert.alert('Error', 'Payment sheet failed');
        }
      }
    } catch (error) {
      Alert.alert('Error', error.response?.data?.error || 'Transaction failed');
    }
    setLoading(false);
  };

  return (
    <StripeProvider publishableKey={STRIPE_PUBLISHABLE_KEY}>
      <View style={{ padding: 20 }}>
        <Text>BioSecure Pay</Text>
        <TextInput
          placeholder="Email"
          value={email}
          onChangeText={setEmail}
          style={{ borderWidth: 1, marginBottom: 10 }}
        />
        <TextInput
          placeholder="Phone"
          value={phone}
          onChangeText={setPhone}
          style={{ borderWidth: 1, marginBottom: 10 }}
        />
        <TextInput
          placeholder="Full Name"
          value={fullName}
          onChangeText={setFullName}
          style={{ borderWidth: 1, marginBottom: 10 }}
        />
        <Button title="Register" onPress={handleRegister} disabled={loading} />
        <Button title="Submit KYC" onPress={handleKycVerify} disabled={loading} />
        <TextInput
          placeholder="Biometric Type (fingerprint/face/voice)"
          value={biometricType}
          onChangeText={setBiometricType}
          style={{ borderWidth: 1, marginBottom: 10 }}
        />
        <Button title="Enroll Biometrics" onPress={handleEnrollBiometrics} disabled={loading} />
        <PlaidLink
          publicKey="your_plaid_public_key" // Replace with Plaid key
          env="sandbox"
          product={['auth']}
          clientName="BioSecure Pay"
          onSuccess={(token) => handlePlaidLink(token.public_token)}
          onExit={() => Alert.alert('Plaid Exit')}
        >
          <Button title="Link Bank Account" disabled={loading} />
        </PlaidLink>
        <TextInput
          placeholder="Amount"
          value={transactionData.amount}
          onChangeText={(text) => setTransactionData({ ...transactionData, amount: text })}
          style={{ borderWidth: 1, marginBottom: 10 }}
        />
        <TextInput
          placeholder="Recipient"
          value={transactionData.recipient}
          onChangeText={(text) => setTransactionData({ ...transactionData, recipient: text })}
          style={{ borderWidth: 1, marginBottom: 10 }}
        />
        <Button title="Initiate Transaction" onPress={handleTransaction} disabled={loading} />
        {loading && <ActivityIndicator size="large" />}
      </View>
    </StripeProvider>
  );
};

export default BioSecurePayApp;