import React, { useState, useEffect } from 'react';
import { View, Text, Button, Alert, StyleSheet } from 'react-native';
import Biometrics from 'react-native-biometrics';
import Voice from '@react-native-voice/voice';

const BiometricPrompt = ({ onSuccess, types }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [templates, setTemplates] = useState([]);
  const [status, setStatus] = useState('');

  useEffect(() => {
    authenticate();
  }, [currentIndex]);

  const authenticate = async () => {
    if (currentIndex >= types.length) {
      onSuccess(templates, types);
      return;
    }
    const type = types[currentIndex];
    setStatus(`Authenticate with ${type}`);
    try {
      let template = '';
      if (type === 'fingerprint' || type === 'face') {
        const rnBiometrics = new Biometrics();
        const { success } = await rnBiometrics.simplePrompt({ promptMessage: `Auth ${type}` });
        if (success) template = `mock_auth_${type}_${Date.now()}`;
      } else if (type === 'voice') {
        await Voice.start('en-US');
        await new Promise((resolve) => {
          Voice.onSpeechResults = (e) => {
            template = e.value[0];
            Voice.stop();
            resolve();
          };
          Voice.onSpeechError = (e) => {
            Alert.alert('Error', e.error.message);
            resolve();
          };
        });
      }
      if (template) {
        setTemplates((prev) => [...prev, template]);
        setCurrentIndex(currentIndex + 1);
      } else {
        Alert.alert('Error', 'Authentication failed. Retry?');
      }
    } catch (error) {
      console.log(error);
      Alert.alert('Error', error.message);
    }
  };

  return (
    <View style={styles.container}>
      <Text>{status}</Text>
      <Button title="Retry" onPress={authenticate} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { padding: 20, backgroundColor: 'white', borderRadius: 10, margin: 20 },
});

export default BiometricPrompt;