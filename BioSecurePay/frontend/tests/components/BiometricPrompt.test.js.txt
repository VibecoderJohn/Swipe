import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import BiometricPrompt from '../../src/components/BiometricPrompt';
import Biometrics from 'react-native-biometrics';
import Voice from '@react-native-voice/voice';

jest.mock('react-native-biometrics', () => {
  return jest.fn().mockImplementation(() => ({
    isSensorAvailable: jest.fn().mockResolvedValue({ available: true }),
    simplePrompt: jest.fn().mockResolvedValue({ success: true })
  }));
});

jest.mock('@react-native-voice/voice', () => ({
  start: jest.fn().mockResolvedValue(undefined),
  stop: jest.fn(),
  onSpeechResults: jest.fn(),
  onSpeechError: jest.fn()
}));

describe('BiometricPrompt', () => {
  const mockOnSuccess = jest.fn();

  it('renders correctly', () => {
    const { getByText } = render(<BiometricPrompt onSuccess={mockOnSuccess} types={['fingerprint']} />);
    expect(getByText('Authenticate with fingerprint')).toBeTruthy();
  });

  it('authenticates fingerprint successfully', async () => {
    const { getByText } = render(<BiometricPrompt onSuccess={mockOnSuccess} types={['fingerprint']} />);
    await new Promise(resolve => setTimeout(resolve, 100));
    expect(mockOnSuccess).toHaveBeenCalledWith(['mock_auth_fingerprint_'], ['fingerprint']);
  });

  it('handles voice authentication', async () => {
    Voice.onSpeechResults.mockImplementation((cb) => cb({ value: ['mock_voice_template'] }));
    const { getByText } = render(<BiometricPrompt onSuccess={mockOnSuccess} types={['voice']} />);
    await new Promise(resolve => setTimeout(resolve, 100));
    expect(mockOnSuccess).toHaveBeenCalledWith(['mock_voice_template'], ['voice']);
  });

  it('handles biometric failure', async () => {
    Biometrics.mockImplementationOnce(() => ({
      isSensorAvailable: jest.fn().mockResolvedValue({ available: false })
    }));
    jest.spyOn(require('react-native'), 'Alert').mockImplementation(({ alert }) => alert());
    const { getByText } = render(<BiometricPrompt onSuccess={mockOnSuccess} types={['fingerprint']} />);
    await new Promise(resolve => setTimeout(resolve, 100));
    expect(require('react-native').Alert.alert).toHaveBeenCalledWith('Error', 'fingerprint not available');
  });
});